# global模块
user    nginx;
worker_processes 1;
error_log   /var/log/nginx/error.log info;
error_log   /var/log/nginx/error.log debug;
error_log   /var/log/nginx/error.log warn;
error_log   /var/log/nginx/error.log error;
pid /var/run/nginx.pid;
worker_rlimit_nofile    65535; # 每一个进程打开文件的最大数目

# event模块
events {
    use epoll; # 网络IO模型
    worker_connections   1024; # 单个进程的最大连接数
}

# 负责请求转发、反向代码、负载均衡
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k; #如果header大小超过1k，就返回400错误bad request error
    client_body_buffer_size 16k; # 读取body缓冲区的大小，超过则放入tmp/文件夹
    client_max_body_size 10m; # 请求体最大容量，超过返回413错误。在header的Content-Length中指定

    sendfile        on; # 开启高效文件传输模式；不用：复制到本地缓冲区-再复制到socket缓冲区；用：传递指针直接指向socket缓冲区
    tcp_nopush     on; # 一次性优化数据发送量
    tcp_nodelay     on; # 防止流量堵塞的算法，防止死锁，约200ms的优化

    keepalive_timeout  120; # 单位秒，alive空闲时间以内可以重用相同连接
    keepalive_requests  10000; # 默认100，一个连接最大请求数量

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}